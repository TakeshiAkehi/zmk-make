#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define LDEF 0
#define LSYM 1
#define LNAV 2
#define LFUN 3
#define LADJ 4

&mt {
    tapping-term-ms = <175>;
    flavor = "tap-preferred";
};

&lt {
    tapping-term-ms = <175>;
    flavor = "balanced";
};


&caps_word {
    continue-list = <UNDERSCORE MINUS BACKSPACE>;
};

/ {
    combos{
        compatible = "zmk,combos";
        timeout-ms = <200>;
        combo_left_thum_r {
            key-positions = <31 32>;
            bindings = <&mo LFUN>;
        };
        combo_left_thum_l {
            key-positions = <30 31>;
            bindings = <&caps_word>;
        };
        combo_left_thum_all {
            key-positions = <30 31 32>;
            bindings = <&sl LADJ>;
        };
        //combo_left_col {
        //    key-positions = <0 10 20>;
        //    bindings = <&sl LADJ>;
        //};
        combo_left_top {
            key-positions = <0 1>;
            bindings = <&kp ESC>;
        };
        combo_left_mid_l {
            key-positions = <11 12>;
            bindings = <&mo LFUN>;
        };
        //combo_left_mid_r {
        //    key-positions = <12 13>;
        //    bindings = <&caps_word>;
        //};
        combo_right_mid_l {
            key-positions = <16 17>;
            bindings = <&kp BSPC>;
        };
        combo_right_mid_r {
            key-positions = <17 18>;
            bindings = <&kp RET>;
        };
    };

    behaviors {
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
                &kp Q       &kp W       &kp U    &kp F         &kp DOT            &kp COMMA      &kp L &kp R     &kp Y      &kp P 
                &mt LCTRL E &kp I       &kp A    &kp O         &kp MINUS          &kp K          &kp T &kp N     &kp S      &mt RCTRL H 
                &mt LSHFT Z &mt LALT X  &kp C    &kp V         &kp SEMI           &kp G          &kp D &kp M     &kp J      &kp B
                                        &kp LGUI &lt LSYM TAB  &mt LSHFT SPACE    &lt LNAV SPACE &none &none 
            >;
        };

        symbol_layer {
            bindings = <
                &kp TILDE       &kp AT        &kp HASH &kp DLLR  &kp PRCNT        &kp CARET      &kp AMPS       &kp ASTRK &kp UNDER    &kp PLUS 
                &mt LCTRL EXCL  &kp LBKT      &kp LPAR &kp COLON &kp LBRC         &kp RBRC       &kp SLASH      &kp RPAR  &kp RBKT     &mt RCTRL EQUAL 
                &kp GRAVE       &kp LALT      &kp LT   &kp GT    &kp MINUS        &kp PIPE       &kp QMARK      &kp DQT   &mt RALT SQT &mt RSHFT BSLH 
                                              &kp LGUI &none     &none            &lt LNAV SPACE &none          &none 
            >;
        };

        nav_layer {
            bindings = <
                &kp N0    &kp N1      &kp N2    &kp N3     &kp N0            &kp HOME    &kp PG_DN     &kp PG_UP     &kp END    &kp K_CMENU
                &kp LCTRL &kp N4      &kp N5    &kp N6     &kp MINUS         &kp LEFT    &kp DOWN      &kp UP        &kp RIGHT  &kp RALT
                &kp LSHFT &mt LALT N7 &kp N8    &kp N9     &kp COMMA         &kp DEL     &kp LC(PG_UP) &kp LC(PG_DN) &none      &kp LGUI
                                      &kp LGUI  &kp TAB    &kp SPACE         &none       &none         &none 
            >;
        };

        fun_layer {
            bindings = <
                &kp F1  &kp F2  &kp F3   &kp F4        &kp F5         &kp COMMA   &kp N7 &kp N8 &kp N9 &kp MINUS
                &kp F6  &kp F7  &kp F8   &kp F9        &kp F10        &kp DOT     &kp N4 &kp N5 &kp N6 &kp N0
                &kp F11 &kp F12 &none    &kp LA(F4)    &kp LS(F5)     &kp DEL     &kp N1 &kp N2 &kp N3 &kp N0
                                &kp LGUI &kp TAB       &kp SPACE      &kp SPACE   &none  &none 
            >;
        };


        adj_layer {
            bindings = <
                &bt  BT_SEL 0    &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4         &kp KP_NUM  &none     &none     &none    &none
                &out OUT_BLE     &none        &kp B        &kp T        &bt BT_CLR           &kp CAPS    &none     &none     &none    &out OUT_BLE
                &out OUT_USB     &none        &none        &none        &bt BT_CLR           &kp PSCRN   &none     &none     &none    &out OUT_USB
                                              &none        &none        &none                &none       &none     &none
            >;
        };
        
    };
};

