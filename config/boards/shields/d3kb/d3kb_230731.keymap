#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define LDEF 0
#define LSYM 1
#define LNUM 2
#define LNAV 3
#define LADJ 4

&mt {
    tapping-term-ms = <175>;
    flavor = "tap-preferred";
};

&lt {
    tapping-term-ms = <175>;
    flavor = "balanced";
};


&caps_word {
    continue-list = <UNDERSCORE MINUS BACKSPACE>;
};

/ {
    combos{
        compatible = "zmk,combos";
        timeout-ms = <200>;
        combo_ll {
            key-positions = <30 31>;
            bindings = <&caps_word>;
        };
        combo_lr {
            key-positions = <31 32>;
            bindings = <&mo LNAV>;
        };
        combo_rl {
            key-positions = <33 34>;
            bindings = <&kp ESC>;
        };
        combo_rr {
            key-positions = <34 35>;
            bindings = <&kp DEL>;
        };
        combo_ladj {
            key-positions = <30 31 32>;
            bindings = <&sl LADJ>;
        };
        combo_radj {
            key-positions = <33 34 35>;
            bindings = <&sl LADJ>;
        };
        combo_esc {
            key-positions = <0 1>;
            bindings = <&kp ESC>;
        };
    };

    behaviors {

        mth: mod_tap_hold_flavor{
            compatible = "zmk,behavior-hold-tap";
            label = "LEFT_POSITIONAL_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <175>;
            bindings = <&kp>, <&kp>;
            retro-tap;
        }; 
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
                &kp Q       &kp W       &kp U    &kp F         &kp DOT                 &kp COMMA    &kp L          &kp R     &kp Y      &kp P 
                &mt LCTRL E &kp I       &kp A    &kp O         &kp MINUS               &kp K        &kp T          &kp N     &kp S      &mt RCTRL H 
                &mt LSHFT Z &mt LALT X  &kp C    &kp V         &kp SEMI                &kp G        &kp D          &kp M     &kp J      &kp B
                                        &kp LGUI &lt LSYM TAB  &mt LSHFT SPACE         &lt LNAV RET &lt LNUM SPACE &kp BSPC 
            >;
        };

        symbol_layer {
            bindings = <
                &kp TILDE       &kp AT        &kp HASH &kp DLLR  &kp PRCNT        &kp CARET &kp AMPS       &kp ASTRK &kp UNDER    &kp PLUS 
                &mt LCTRL EXCL  &kp LBKT      &kp LPAR &kp COLON &kp LBRC         &kp RBRC  &kp SLASH      &kp RPAR  &kp RBKT     &mt RCTRL EQUAL 
                &kp GRAVE       &kp LALT      &kp LT   &kp GT    &kp MINUS        &kp PIPE  &kp QMARK      &kp DQT   &mt RALT SQT &mt RSHFT BSLH 
                                              &kp LGUI &none     &kp SPACE        &kp RET   &kp SPACE      &kp BSPC 
            >;
        };

        num_layer {
            bindings = <
                &kp COMMA     &kp N7   &kp N8    &kp N9     &kp MINUS    &kp COMMA  &kp N7    &kp N8   &kp N9  &kp MINUS 
                &mt LCTRL DOT &kp N4   &kp N5    &kp N6     &kp N0       &kp DOT    &kp N4    &kp N5   &kp N6  &mth RCTRL N0 
                &kp UNDER     &kp N1   &kp N2    &kp N3     &kp N0       &kp UNDER  &kp N1    &kp N2   &kp N3  &kp N0 
                                       &kp LGUI  &kp TAB    &kp SPACE    &kp RET    &kp SPACE &kp BSPC 
            >;
        };

        nav_layer {
            bindings = <
                &kp F1        &kp F2       &kp F3   &kp F4        &kp F5          &kp HOME    &kp PG_DN     &kp PG_UP     &kp END    &kp K_CMENU
                &mt LCTRL F6  &kp F7       &kp F8   &kp F9        &kp F10         &kp LEFT    &kp DOWN      &kp UP        &kp RIGHT  &kp RALT
                &mt LSHFT F11 &mt LALT F12 &none    &kp LA(F4)    &kp LS(F5)      &kp LC(N1)  &kp LC(PG_UP) &kp LC(PG_DN) &kp LC(N2) &kp RGUI
                                           &kp LGUI &kp TAB       &kp SPACE       &kp RET     &kp SPACE     &kp BSPC 
            >;
        };

        adj_layer {
            bindings = <
                &bt  BT_SEL 0    &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4         &kp KP_NUM  &none     &none     &none    &none
                &out OUT_BLE     &none        &kp B        &kp T        &bt BT_CLR           &kp CAPS    &none     &none     &none    &out OUT_BLE
                &out OUT_USB     &none        &none        &none        &bt BT_CLR           &kp PSCRN   &none     &none     &none    &out OUT_USB
                                              &none        &none        &none                &none       &none     &none
            >;
        };
        
    };
};


//        num_layer {
//            bindings = <
//                &kp F1        &kp F2       &kp F3   &kp F4        &kp F5                &kp COMMA  &kp N7 &kp N8 &kp N9      &kp MINUS 
//                &mt LCTRL F6  &kp F7       &kp F8   &kp F9        &kp F10               &kp DOT    &kp N4 &kp N5 &kp N6      &mth RCTRL N0 
//                &mt LSHFT F11 &mt LALT F12 &none    &kp LA(F4)    &kp LS(F5)            &kp UNDER  &kp N1 &kp N2 &kp N3      &kp N0 
//                                           &kp LGUI &kp TAB       &kp SPACE             &kp RET    &kp SPACE &kp BSPC 
//            >;
//        };
//
//        nav_layer {
//            bindings = <
//                &kp LC(LA(X)) &kp LC(N1) &kp LC(N2) &kp LC(N3) &kp LC(N4)    &kp HOME    &kp PG_DN     &kp PG_UP     &kp END    &kp K_CMENU
//                &kp LCTRL     &kp LG(N1) &kp LG(N2) &kp LG(N3) &kp LG(N4)    &kp LEFT    &kp DOWN      &kp UP        &kp RIGHT  &kp RALT
//                &kp LSHFT     &kp LALT   &none      &none      &none         &kp LC(N1)  &kp LC(PG_UP) &kp LC(PG_DN) &kp LC(N2) &kp RGUI
//                                         &kp LGUI   &kp TAB    &kp SPACE     &kp RET     &kp SPACE     &kp BSPC 
//            >;
//        };
//
//        td_count: tap_dance_counter {
//            compatible = "zmk,behavior-tap-dance";
//            label = "TAP_DANCE_COUNTER";
//            #binding-cells = <0>;
//            tapping-term-ms = <225>;
//            bindings = <&kp N0>, <&kp N1>, <&kp N2>, <&kp N3>, <&kp N4>, <&kp N5>, <&kp N6>, <&kp N7>, <&kp N8>, <&kp N9>;
//        };